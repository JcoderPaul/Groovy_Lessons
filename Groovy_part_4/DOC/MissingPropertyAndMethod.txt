*** MissingProperty ***

Когда мы пытаемся получить доступ к неопределенному свойству класса Groovy,
возникает исключение MissingPropertyException. Чтобы избежать выброса исключения,
Groovy предоставляет метод propertyMissing.

Предположим у нас есть класс Employee с некоторыми свойствами:

**************************************************************************************
class Employee {
    String firstName
    String lastName
    int age
}
**************************************************************************************

Далее, мы создадим объект Employee и попытаемся отобразить неопределенный адрес свойства,
т.е вызовем метод или поле, которого нет у класса - стимулируем вброс MissingPropertyException:

**************************************************************************************
Employee emp = new Employee(firstName: "Norman", lastName: "Lewis")
println emp.address
**************************************************************************************
groovy.lang.MissingPropertyException: No such property:
address for class: com.foreach.metaprogramming.Employee
**************************************************************************************

И тут Groovy предоставляет нам метод propertyMissing для перехвата запроса об отсутствующем
свойстве. Таким образом, мы можем избежать MissingPropertyException во время выполнения.

Чтобы поймать вызов метода получения отсутствующего свойства, мы можем его переопределить
для своих нужд, определим его с одним аргументом для имени свойства:

**************************************************************************************
def propertyMissing(String propertyName) {
    "property '$propertyName' is not available"
}
**************************************************************************************
assert emp.address == "property 'address' is not available"
**************************************************************************************

Кроме того, тот же метод может иметь второй аргумент в качестве значения свойства, чтобы
поймать вызов метода установки отсутствующего свойства:

**************************************************************************************
def propertyMissing(String propertyName, propertyValue) {
    println "cannot set $propertyValue - property '$propertyName' is not available"
}
**************************************************************************************

*** MissingMethod ***

Метод methodMissing похож на propertyMissing. Однако methodMissing перехватывает вызов
любого отсутствующего метода, тем самым избегая MissingMethodException .

Попробуем вызвать метод getFullName для объекта Employee. Поскольку getFullName отсутствует,
код во время выполнения вызовет исключение MissingMethodException:

**************************************************************************************
try {
    emp.getFullName()
} catch (MissingMethodException e) {
    println "method is not defined"
}
**************************************************************************************

Итак, вместо того, чтобы оборачивать вызов метода в try-catch, мы можем переопределить methodMissing:

**************************************************************************************
def methodMissing(String methodName, def methodArgs) {
    "method '$methodName' is not defined"
}
**************************************************************************************
assert emp.getFullName() == "method 'getFullName' is not defined"
**************************************************************************************